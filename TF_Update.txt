create or replace trigger IMP_TO_TM_ON_UPDATE 
after update of FREIGHT_AMOUNT,INSURANCE_AMOUNT,OTHER_CHARGES, PAY_SOURCE, CURRENCY_CODE on IMP_INFO 
for each row 
declare

V_MSG varchar(10);
V_COUNT int;

V_ENT_DATE DATE;
V_ENT_DATE_II DATE;

V_F_AMOUNT_N NUMBER(15,2);
V_F_AMOUNT_O NUMBER(15,2);
V_I_AMOUNT_N NUMBER(15,2);
V_I_AMOUNT_O NUMBER(15,2);
V_C_AMOUNT_N NUMBER(15,2);
V_C_AMOUNT_O NUMBER(15,2);


begin

  V_ENT_DATE 	:= TO_DATE('31-AUG-2015', 'DD-MON-YYYY');
  V_ENT_DATE_II	:= :old.ENT_DATE;
  
  IF (V_ENT_DATE_II > V_ENT_DATE) THEN
	  --if freight amount entry first time
	  select COUNT(*) into V_COUNT from TM_MAIN where IMP_NO = :new.IMP_NO and PURPOSE_CODE_SBB not in ('2240', '2310');
	  if (:new.FREIGHT_AMOUNT > 0 AND V_COUNT = 0 ) then
			V_MSG := F_IMP_TO_TM_INSERT(:new.IMP_NO, :new.ADSCODE, :new.FREIGHT_AMOUNT, 0, 0, :new.CURRENCY_CODE, :new.COUNTRY_CODE, :new.PAYMENT_DATE, :new.ENT_USER, :new.PAY_SOURCE, :new.LC_ID, :new.ADVANCE_YN, :new.TYPE_CODE, :new.SHIP_PORT, :new.FINAL_YN);
	  end if;
	  
	  --if insurance amount entry first time
	  select count(*) into V_COUNT from tm_main WHERE imp_no = :new.IMP_NO and PURPOSE_CODE_SBB = '2240';
	  if (:new.INSURANCE_AMOUNT > 0 AND V_COUNT = 0 ) then
			V_MSG := F_IMP_TO_TM_INSERT(:new.IMP_NO, :new.ADSCODE, 0, :new.INSURANCE_AMOUNT, 0, :new.CURRENCY_CODE, :new.COUNTRY_CODE, :new.PAYMENT_DATE, :new.ENT_USER, :new.PAY_SOURCE, :new.LC_ID, :new.ADVANCE_YN, :new.TYPE_CODE, :new.SHIP_PORT, :new.FINAL_YN);
	  end if;
	  
	  --if other charges entry first time
	  select count(*) into V_COUNT from tm_main WHERE imp_no = :new.IMP_NO and PURPOSE_CODE_SBB = '2310';
	  if (:new.OTHER_CHARGES > 0 AND V_COUNT = 0 ) then
			V_MSG := F_IMP_TO_TM_INSERT(:new.IMP_NO, :new.ADSCODE, 0, 0, :new.OTHER_CHARGES, :new.CURRENCY_CODE, :new.COUNTRY_CODE, :new.PAYMENT_DATE, :new.ENT_USER, :new.PAY_SOURCE, :new.LC_ID, :new.ADVANCE_YN, :new.TYPE_CODE, :new.SHIP_PORT, :new.FINAL_YN);
	  end if;  
  
	  --Now update	
	  V_F_AMOUNT_N := NVL(:new.FREIGHT_AMOUNT, 0);
	  V_F_AMOUNT_O := NVL(:old.FREIGHT_AMOUNT, 0);
	  V_I_AMOUNT_N := NVL(:new.INSURANCE_AMOUNT, 0);
	  V_I_AMOUNT_O := NVL(:old.INSURANCE_AMOUNT, 0);
	  V_C_AMOUNT_N := NVL(:new.OTHER_CHARGES, 0);
	  V_C_AMOUNT_O := NVL(:old.OTHER_CHARGES, 0);
	  
	  if (V_F_AMOUNT_N != V_F_AMOUNT_O or V_I_AMOUNT_N != V_I_AMOUNT_O or V_C_AMOUNT_N != V_C_AMOUNT_O or :new.PAY_SOURCE != :old.PAY_SOURCE or :new.CURRENCY_CODE != :old.CURRENCY_CODE) then
		  --update TM_MAIN set CONFIRMED = '3' where IMP_NO = :old.IMP_NO;
		  V_MSG := F_IMP_TO_TM_UPDATE(:old.IMP_NO, V_F_AMOUNT_N, V_F_AMOUNT_O,  V_I_AMOUNT_N, V_I_AMOUNT_O, V_C_AMOUNT_N, V_C_AMOUNT_O, :new.CURRENCY_CODE, :old.CURRENCY_CODE, :new.PAYMENT_DATE, :old.PAY_SOURCE, :new.PAY_SOURCE);      
	  end if;
  END IF;
END;







create or replace FUNCTION F_IMP_TO_TM_UPDATE 
(
	P_IMP_NO IN VARCHAR2,	
	FREIGHT_AMOUNT_NEW      	number,
	FREIGHT_AMOUNT_old      	NUMBER,
	INSURANCE_AMOUNT_NEW    	number,
	INSURANCE_AMOUNT_OLD    	number,
	OTHER_CHARGES_new       	number,
	OTHER_CHARGES_OLD       	number,
	CURRENCY_CODE_NEW      		CHAR,
	CURRENCY_CODE_OLD       	CHAR,
	PAYMENT_DATE	         	date, --to be considered TM_DATE
	PAY_SOURCE_OLD				number,  ---new pay source
	PAY_SOURCE_II				number  ---new pay source
) RETURN VARCHAR2 AS 
  
	V_MOP_CASH            	NUMBER(15,2);
	V_MOP_TC              	NUMBER(15,2);
	V_MOP_CARD            	NUMBER(15,2);
	V_MOP_FDD             	NUMBER(15,2);
	V_MOP_MT              	NUMBER(15,2);
	V_MOP_OTHER           	NUMBER(15,2);
	V_SFC_BANK            	VARCHAR2(20);
	V_SFC_FC_AC           	VARCHAR2(20);
	V_SFC_ERQ             	VARCHAR2(20);
	V_SFC_OTHER           	VARCHAR2(20);
	
	V_AMOUNT_IN_BDT       	NUMBER(15,2);
	V_STR_MSG 				varchar2(500);

BEGIN
    
	--FREIGHT_AMOUNT_NEW:= NVL(TO_NUMBER(FREIGHT_AMOUNT_NEW),0);
	--FREIGHT_AMOUNT_OLD:= NVL(TO_NUMBER(FREIGHT_AMOUNT_OLD),0);
	
	IF(FREIGHT_AMOUNT_NEW != FREIGHT_AMOUNT_OLD OR PAY_SOURCE_OLD != PAY_SOURCE_II OR CURRENCY_CODE_NEW != CURRENCY_CODE_OLD) THEN		
		
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE, CURRENCY_CODE_NEW , '019'  ) * FREIGHT_AMOUNT_NEW;		
						
		--Call function to set MOP and SFC
		V_STR_MSG := F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(FREIGHT_AMOUNT_NEW),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		update TM_MAIN set 
			  MOP_MT 		= V_MOP_MT,
			  MOP_CASH 		= V_MOP_CASH,
			  
			  SFC_OTHER 	= V_SFC_OTHER,
			  SFC_ERQ 		= V_SFC_ERQ,			  
			  SFC_BANK 		= V_SFC_BANK,
			  SFC_FC_AC 	= V_SFC_FC_AC,
			  
			  CURRENCY_CODE = CURRENCY_CODE_NEW,
			  FC_AMOUNT 	= FREIGHT_AMOUNT_NEW,
			  AMOUNT_IN_BDT = V_AMOUNT_IN_BDT
			WHERE imp_no = P_IMP_NO and PURPOSE_CODE_SBB not in ('2240', '2310');

	END IF; -- end of FREIGHT_AMOUNT
	
	--INSURANCE_AMOUNT
	--INSURANCE_AMOUNT_NEW:= NVL(TO_NUMBER(INSURANCE_AMOUNT_NEW),0);
	--INSURANCE_AMOUNT_OLD:= NVL(TO_NUMBER(INSURANCE_AMOUNT_OLD),0);
	
	IF(INSURANCE_AMOUNT_NEW != INSURANCE_AMOUNT_OLD OR PAY_SOURCE_OLD != PAY_SOURCE_II OR CURRENCY_CODE_NEW != CURRENCY_CODE_OLD) THEN
		
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE, CURRENCY_CODE_NEW , '019'  ) * INSURANCE_AMOUNT_NEW;
		
		--Call function to set MOP and SFC
		V_STR_MSG := F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(INSURANCE_AMOUNT_NEW),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		update TM_MAIN set 
			  MOP_MT 		= V_MOP_MT,
			  MOP_CASH 		= V_MOP_CASH,
			  
			  SFC_OTHER 	= V_SFC_OTHER,
			  SFC_ERQ 		= V_SFC_ERQ,			  
			  SFC_BANK 		= V_SFC_BANK,
			  SFC_FC_AC 	= V_SFC_FC_AC,
			  
			  CURRENCY_CODE = CURRENCY_CODE_NEW,
			  FC_AMOUNT 	= INSURANCE_AMOUNT_NEW,
			  AMOUNT_IN_BDT = V_AMOUNT_IN_BDT
			WHERE imp_no = P_IMP_NO and PURPOSE_CODE_SBB = '2240';
			
	END IF; ----- end of INSURANCE_AMOUNT
	
	--OTHER_CHARGES
	--OTHER_CHARGES_NEW:= NVL(TO_NUMBER(OTHER_CHARGES_NEW),0);
	--OTHER_CHARGES_OLD:= NVL(TO_NUMBER(OTHER_CHARGES_OLD),0);
	
	IF(OTHER_CHARGES_NEW != OTHER_CHARGES_OLD OR PAY_SOURCE_OLD != PAY_SOURCE_II OR CURRENCY_CODE_NEW != CURRENCY_CODE_OLD) THEN
		
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE, CURRENCY_CODE_NEW , '019'  ) * OTHER_CHARGES_NEW;
				
		--Call function to set MOP and SFC
		V_STR_MSG := F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(OTHER_CHARGES_NEW),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		update TM_MAIN set 
			  MOP_MT 		= V_MOP_MT,
			  MOP_CASH 		= V_MOP_CASH,
			  
			  SFC_OTHER 	= V_SFC_OTHER,
			  SFC_ERQ 		= V_SFC_ERQ,			  
			  SFC_BANK 		= V_SFC_BANK,
			  SFC_FC_AC 	= V_SFC_FC_AC,
			  
			  CURRENCY_CODE = CURRENCY_CODE_NEW,
			  FC_AMOUNT 	= OTHER_CHARGES_NEW,
			  AMOUNT_IN_BDT = V_AMOUNT_IN_BDT
			WHERE imp_no = P_IMP_NO and PURPOSE_CODE_SBB = '2310';
			
	END IF; ----- end of OTHER_CHARGES
	
		
	RETURN 'SUCCESS';	
	----Any exception
	EXCEPTION
	  when OTHERS then
		  --V_ERR := SQLERRM;
		  TM_INSERT_ERROR_P ( 654321, P_IMP_NO, DBMS_UTILITY.FORMAT_ERROR_STACK || '--' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, $$plsql_line);  
      return 'FAIL';
      
END F_IMP_TO_TM_UPDATE;