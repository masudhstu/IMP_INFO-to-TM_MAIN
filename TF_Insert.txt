create or replace trigger IMP_TO_TM_ON_INSERT 
after insert on IMP_INFO 
FOR EACH ROW
declare
v_msg varchar2(20);
begin
  if (:new.FREIGHT_AMOUNT > 0 or :new.INSURANCE_AMOUNT > 0 or :new.OTHER_CHARGES > 0) then
    V_MSG := F_IMP_TO_TM_INSERT(:new.IMP_NO, :new.ADSCODE, :new.FREIGHT_AMOUNT, :new.INSURANCE_AMOUNT, :new.OTHER_CHARGES, :new.CURRENCY_CODE, :new.COUNTRY_CODE, :new.PAYMENT_DATE, :new.ENT_USER, :new.PAY_SOURCE, :new.LC_ID, :new.ADVANCE_YN, :new.TYPE_CODE, :new.SHIP_PORT, :new.FINAL_YN);
  end if;
END;


create or replace FUNCTION F_IMP_TO_TM_INSERT 
(
	P_IMP_NO 			 IN VARCHAR2,
	ADSCODE_II             	CHAR,
	FREIGHT_AMOUNT_II      	NUMBER,
	INSURANCE_AMOUNT_II    	NUMBER,
	OTHER_CHARGES_II       	NUMBER,
	CURRENCY_CODE_II       	CHAR,
	COUNTRY_CODE_II        	CHAR,
	PAYMENT_DATE_II         date, --to be considered TM_DATE
	ENT_USER_II          	varchar2,
	PAY_SOURCE_II			number,
	LC_ID_II				number,
	ADVANCE_YN_II			varchar2,
	TYPE_CODE_II			varchar2,
	SHIP_PORT_II			number,
	FINAL_YN_II             CHAR
  
) RETURN VARCHAR2 AS 

	V_ID_TMF              	VARCHAR2(18);
	V_SERIAL              	CHAR(6);
	V_TM_FOR              	VARCHAR2(20);

	
	V_PURPOSE_CODE_BB     	VARCHAR2(9);
	V_PURPOSE_CODE_SBB    	VARCHAR2(4);

	V_FX_MANUAL_PARA      	VARCHAR2(200);
	V_MONTH_ID            	CHAR(2);
	V_CATEGORY_CODE       	NUMBER(2,0);
	V_ENTRY_DATE          	DATE;

	V_CONFIRMED           	CHAR(1);

	V_MOP_CASH            	NUMBER(15,2);
	V_MOP_TC              	NUMBER(15,2);
	V_MOP_CARD            	NUMBER(15,2);
	V_MOP_FDD             	NUMBER(15,2);
	V_MOP_MT              	NUMBER(15,2);
	V_MOP_OTHER           	NUMBER(15,2);
	V_SFC_BANK            	VARCHAR2(20);
	V_SFC_FC_AC           	VARCHAR2(20);
	V_SFC_ERQ             	VARCHAR2(20);
	V_SFC_OTHER           	VARCHAR2(20);
	V_AMOUNT_IN_BDT       	NUMBER(15,2);



	LCAF_ID_LI				varchar2(18 byte);
	BIN_LI					number(11,0);  --CONTACT_NO
	BENEFICIARY_NAME_LI		VARCHAR2(300);


	IMP_REGNO_LCAF	  		VARCHAR2(50 BYTE);

	IMPORTER_NAME		  	varchar2(100 byte);
	IMPORTER_ADDRESS		VARCHAR2(200 BYTE);


	V_SL_NO				  	int;
	V_SERIAL_NO 			int;
	V_STR_MSG 				varchar2(500);
	IS_VALID_ENTRY 			INT;

BEGIN
  
  --add code and bank code of logged in user
	BEGIN	
	
      /*SELECT ADSCODE, FREIGHT_AMOUNT, INSURANCE_AMOUNT, OTHER_CHARGES, CURRENCY_CODE, COUNTRY_CODE,
           PAYMENT_DATE, ENT_USER, PAY_SOURCE, LC_ID, ADVANCE_YN, TYPE_CODE 
          INTO ADSCODE_II, FREIGHT_AMOUNT_II, INSURANCE_AMOUNT_II, OTHER_CHARGES_II, CURRENCY_CODE_II, COUNTRY_CODE_II,
             PAYMENT_DATE_II, ENT_USER_II, PAY_SOURCE_II, LC_ID_II, ADVANCE_YN_II, TYPE_CODE_II 
              FROM IMP_INFO WHERE IMP_NO = P_IMP_NO AND ROWNUM < 2;*/
      
      SELECT LCAF_ID, BIN, BENEFICIARY_NAME 
          INTO LCAF_ID_LI, BIN_LI, BENEFICIARY_NAME_LI
              FROM LC_INFO WHERE LC_ID = LC_ID_II AND ROWNUM < 2;
              
      SELECT IMP_REGNO
          INTO IMP_REGNO_LCAF
              FROM LCAF WHERE LCAF_ID = LCAF_ID_LI AND ROWNUM < 2;
              
      SELECT IMP_REGNO || '-' || IMP_NAME, IMP_ADDR1 || ', ' || IMP_ADDR2
          INTO IMPORTER_NAME, IMPORTER_ADDRESS
              FROM IMPORTER WHERE IMP_REGNO = IMP_REGNO_LCAF AND ROWNUM < 2;
  END;
	
	
	SELECT TO_CHAR(SYSDATE, 'MM') INTO V_MONTH_ID FROM DUAL;
	V_ENTRY_DATE := SYSDATE;	
	
  IF FINAL_YN_II = 'Y' THEN
      V_CONFIRMED := '1';
  END IF;
			
	--TM_FOR
	V_TM_FOR := 'Miscellaneous';	
			
	--FREIGHT_AMOUNT
	IF(FREIGHT_AMOUNT_II > 0) THEN
				
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE_II, CURRENCY_CODE_II , '019'  ) * FREIGHT_AMOUNT_II;
		V_CATEGORY_CODE := 42;
		V_FX_MANUAL_PARA := 'Circular No 6/2015';
		
		--V_PURPOSE_CODE_SBB
		V_PURPOSE_CODE_SBB := F_IMP_TO_TM_GET_PCODE(ADVANCE_YN_II, TYPE_CODE_II, SHIP_PORT_II);		
		--V_PURPOSE_CODE_BB
		SELECT PURPOSE_CODE_BB INTO V_PURPOSE_CODE_BB FROM PURPOSE WHERE PURPOSE_CODE_SBB = V_PURPOSE_CODE_SBB AND TYPE = 4 and LEAF = 'Y';
		
		/*IMP_PAY_SOURCE
		1	Cash
		2	ERQ
		3	Loan Grant
		4	EDF
		5	FC Account
		6	Export Proceeds
		7	Forced Loan
		8	Buyer's Credit
		9	Supplier's Credit*/
		
		/*--initiate to zero
		V_MOP_CASH := 0; V_SFC_OTHER := 0; V_SFC_ERQ := 0; V_MOP_OTHER := 0; V_SFC_BANK := 0; V_SFC_FC_AC := 0; V_MOP_MT := 0;
		
		
		IF PAY_SOURCE_II IN (1) THEN	
			V_MOP_CASH 	:= NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);
			V_SFC_BANK 	:= NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);	
		ELSIF PAY_SOURCE_II IN (2) THEN
			V_SFC_ERQ 	:= NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);		
		ELSIF PAY_SOURCE_II IN (5) THEN
			V_SFC_FC_AC := NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);
		ELSE
			V_SFC_OTHER := NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);
			V_MOP_MT 	:= NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0);
		END IF;*/
		
		--Call function to set MOP and SFC
		F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(FREIGHT_AMOUNT_II),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		--SERIAL NO
		BEGIN
		  SELECT SERIALMAX + 1 INTO V_SERIAL_NO FROM LOOKUP_TM_MAIN WHERE ADSCODE = ADSCODE_II AND YEAR = TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'));		  
		EXCEPTION
		   WHEN NO_DATA_FOUND THEN
			  V_SERIAL_NO := 1;
		END;
		
		--ID_TMF
		V_ID_TMF := ADSCODE_II || LPAD(TO_CHAR(V_SERIAL_NO), 6, '0') || TO_CHAR(SYSDATE, 'YYYY');
		--SERIAL
		V_SERIAL := LPAD(TO_CHAR(V_SERIAL_NO), 6, '0');
		
		--inserting
		insert into TM_MAIN (ID_TMF,     SERIAL,   TM_FOR,    ADSCODE,         FC_AMOUNT,    CURRENCY_CODE,    COUNTRY_CODE,   PURPOSE_CODE_BB,   PURPOSE_CODE_SBB, BENEFICIARY_DETAILS, APPLICANT_NAME, APPLICANT_ADDRESS,   FX_MANUAL_PARA,   MONTH_ID,   CATEGORY_CODE,    ENTRY_DATE,   	  TM_DATE,    CONFIRMED,   MOP_CASH,   MOP_TC,   MOP_CARD,   MOP_FDD,    MOP_MT,   MOP_OTHER,    SFC_BANK,   SFC_FC_AC,    SFC_ERQ,    SFC_OTHER,    AMOUNT_IN_BDT, CONTACT_NO,   ENTRY_USER,   IMP_NO) 
					 VALUES (V_ID_TMF, V_SERIAL, V_TM_FOR, ADSCODE_II, FREIGHT_AMOUNT_II, CURRENCY_CODE_II, COUNTRY_CODE_II, V_PURPOSE_CODE_BB, V_PURPOSE_CODE_SBB, BENEFICIARY_NAME_LI,  IMPORTER_NAME,  IMPORTER_ADDRESS, V_FX_MANUAL_PARA, V_MONTH_ID, V_CATEGORY_CODE,  V_ENTRY_DATE, PAYMENT_DATE_II,  V_CONFIRMED, V_MOP_CASH, V_MOP_TC, V_MOP_CARD, V_MOP_FDD,  V_MOP_MT, V_MOP_OTHER,  V_SFC_BANK, V_SFC_FC_AC,  V_SFC_ERQ,  V_SFC_OTHER,  V_AMOUNT_IN_BDT,     BIN_LI,  ENT_USER_II,  P_IMP_NO);

	END IF; -- end of FREIGHT_AMOUNT
	
	--INSURANCE_AMOUNT
	IF(INSURANCE_AMOUNT_II > 0) THEN
		
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE_II, CURRENCY_CODE_II , '019'  ) * INSURANCE_AMOUNT_II;
		V_CATEGORY_CODE := 42;
		V_FX_MANUAL_PARA := 'Circular No 6/2015';
		
    --V_PURPOSE_CODE_SBB
    V_PURPOSE_CODE_SBB := '2240';		--2280, 5132
		--V_PURPOSE_CODE_BB
		SELECT PURPOSE_CODE_BB INTO V_PURPOSE_CODE_BB FROM PURPOSE WHERE PURPOSE_CODE_SBB = V_PURPOSE_CODE_SBB AND TYPE = 4 and LEAF = 'Y';
		
		--Call function to set MOP and SFC
		V_STR_MSG := F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(INSURANCE_AMOUNT_II),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		--SERIAL NO
		BEGIN
		  SELECT SERIALMAX + 1 INTO V_SERIAL_NO FROM LOOKUP_TM_MAIN WHERE ADSCODE = ADSCODE_II AND YEAR = TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'));		  
		EXCEPTION
		   WHEN NO_DATA_FOUND THEN
			  V_SERIAL_NO := 1;
		END;
		
		--ID_TMF
		V_ID_TMF := ADSCODE_II || LPAD(TO_CHAR(V_SERIAL_NO), 6, '0') || TO_CHAR(SYSDATE, 'YYYY');
		--SERIAL
		V_SERIAL := LPAD(TO_CHAR(V_SERIAL_NO), 6, '0');
		
		--inserting
		insert into TM_MAIN (ID_TMF,     SERIAL,   TM_FOR,    ADSCODE,           FC_AMOUNT,    CURRENCY_CODE,    COUNTRY_CODE,   PURPOSE_CODE_BB,   PURPOSE_CODE_SBB, BENEFICIARY_DETAILS, APPLICANT_NAME, APPLICANT_ADDRESS,   FX_MANUAL_PARA,   MONTH_ID,   CATEGORY_CODE,    ENTRY_DATE,   		   TM_DATE,    CONFIRMED,   MOP_CASH,   MOP_TC,   MOP_CARD,   MOP_FDD,    MOP_MT,   MOP_OTHER,    SFC_BANK,   SFC_FC_AC,    SFC_ERQ,    SFC_OTHER,    AMOUNT_IN_BDT, CONTACT_NO,   ENTRY_USER,   IMP_NO) 
					 VALUES (V_ID_TMF, V_SERIAL, V_TM_FOR, ADSCODE_II, INSURANCE_AMOUNT_II, CURRENCY_CODE_II, COUNTRY_CODE_II, V_PURPOSE_CODE_BB, V_PURPOSE_CODE_SBB, BENEFICIARY_NAME_LI,  IMPORTER_NAME,  IMPORTER_ADDRESS, V_FX_MANUAL_PARA, V_MONTH_ID, V_CATEGORY_CODE,  V_ENTRY_DATE, PAYMENT_DATE_II,  V_CONFIRMED, V_MOP_CASH, V_MOP_TC, V_MOP_CARD, V_MOP_FDD,  V_MOP_MT, V_MOP_OTHER,  V_SFC_BANK, V_SFC_FC_AC,  V_SFC_ERQ,  V_SFC_OTHER,  V_AMOUNT_IN_BDT,     BIN_LI,  ENT_USER_II,  P_IMP_NO);
					 
	END IF; ----- end of INSURANCE_AMOUNT
	
	--OTHER_CHARGES
	IF(OTHER_CHARGES_II > 0) THEN
		
		V_AMOUNT_IN_BDT := WEGRCURCOVERT( PAYMENT_DATE_II, CURRENCY_CODE_II , '019'  ) * OTHER_CHARGES_II;
		V_CATEGORY_CODE := 42;						
		V_FX_MANUAL_PARA := 'Circular No 6/2015';
		
    --V_PURPOSE_CODE_SBB
    V_PURPOSE_CODE_SBB := '2310';	
		--V_PURPOSE_CODE_BB
		SELECT PURPOSE_CODE_BB INTO V_PURPOSE_CODE_BB FROM PURPOSE WHERE PURPOSE_CODE_SBB = V_PURPOSE_CODE_SBB AND TYPE = 4 and LEAF = 'Y';
		
		--Call function to set MOP and SFC
		V_STR_MSG := F_IMP_TO_TM_GET_MOP_SFC(PAY_SOURCE_II, NVL(TO_NUMBER(OTHER_CHARGES_II),0), V_MOP_CASH, V_MOP_MT, V_SFC_BANK, V_SFC_ERQ, V_SFC_FC_AC, V_SFC_OTHER);
		
		--SERIAL NO
		BEGIN
		  SELECT SERIALMAX + 1 INTO V_SERIAL_NO FROM LOOKUP_TM_MAIN WHERE ADSCODE = ADSCODE_II AND YEAR = TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'));		  
		EXCEPTION
		   WHEN NO_DATA_FOUND THEN
			  V_SERIAL_NO := 1;
		END;
		
		--ID_TMF
		V_ID_TMF := ADSCODE_II || LPAD(TO_CHAR(V_SERIAL_NO), 6, '0') || TO_CHAR(SYSDATE, 'YYYY');
		--SERIAL
		V_SERIAL := LPAD(TO_CHAR(V_SERIAL_NO), 6, '0');
		
		--inserting
		insert into TM_MAIN (ID_TMF,     SERIAL,   TM_FOR,    ADSCODE,        FC_AMOUNT,    CURRENCY_CODE,    COUNTRY_CODE,   PURPOSE_CODE_BB,   PURPOSE_CODE_SBB, BENEFICIARY_DETAILS, APPLICANT_NAME, APPLICANT_ADDRESS,   FX_MANUAL_PARA,   MONTH_ID,   CATEGORY_CODE,    ENTRY_DATE,   		   TM_DATE,    CONFIRMED,   MOP_CASH,   MOP_TC,   MOP_CARD,   MOP_FDD,    MOP_MT,   MOP_OTHER,    SFC_BANK,   SFC_FC_AC,    SFC_ERQ,    SFC_OTHER,    AMOUNT_IN_BDT, CONTACT_NO,   ENTRY_USER,   IMP_NO) 
					 VALUES (V_ID_TMF, V_SERIAL, V_TM_FOR, ADSCODE_II, OTHER_CHARGES_II, CURRENCY_CODE_II, COUNTRY_CODE_II, V_PURPOSE_CODE_BB, V_PURPOSE_CODE_SBB, BENEFICIARY_NAME_LI,  IMPORTER_NAME,  IMPORTER_ADDRESS, V_FX_MANUAL_PARA, V_MONTH_ID, V_CATEGORY_CODE,  V_ENTRY_DATE, PAYMENT_DATE_II,  V_CONFIRMED, V_MOP_CASH, V_MOP_TC, V_MOP_CARD, V_MOP_FDD,  V_MOP_MT, V_MOP_OTHER,  V_SFC_BANK, V_SFC_FC_AC,  V_SFC_ERQ,  V_SFC_OTHER,  V_AMOUNT_IN_BDT,     BIN_LI,  ENT_USER_II,  P_IMP_NO);
					 
	END IF; ----- end of OTHER_CHARGES
	
		
	RETURN 'SUCCESS';	
	----Any exception
	EXCEPTION
	  when OTHERS then
		  --V_ERR := SQLERRM;
		  TM_INSERT_ERROR_P ( 123456, P_IMP_NO, DBMS_UTILITY.FORMAT_ERROR_STACK || '--' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, $$plsql_line);  
      return 'FAIL';
      
END F_IMP_TO_TM_INSERT;